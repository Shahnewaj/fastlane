before_all do
  ensure_git_branch
  ensure_git_status_clean
  git_pull
end

platform :ios do 
    # for update version
    private_lane : update_version do
        
        version = get_app_store_version_number(bundle_id:  'test')
        plist_version =  get_version_number_from_plist(xcodeproj:'./ios/test.xcodeproj')
        if Gem:Version.new(plist_version.to_f) == Gem:Version.new(app_store_version.to._f)
            UI.message "bumping minor"
            increment_version_number_in_plist(xcodeproj:'./ios/test.xcodeproj' ,  bump_type:'minor')
        else     
            UI.message "bumping patch"
            increment_version_number_in_plist(xcodeproj: './ios/test.xcodeproj' , bump_type:'patch')
    end

    # for staging
    private_lane :staging_build do 
        increment_build_number_in_plist(xcodeproj: './ios/test.xcodeproj' , target: 'test' )
        gym(scheme:  'test-staging' , workspace: './ios/test.xcworkspace')
    end

    lane :  beta do 
        staging_build 
        upload_to_testflight(username : 'shahnewajtxt@gmail.com' , app_identifier : 'test')
        commit_version_bump(message : ' bump build ')
        push_to_git_remote 
    end
end 

platform :android do 
    desc : "Android build and release to beta"
    lane : beta do 
        increment_version_code(app_project_dir: './android/app')
        gradle(task: 'clean' , project_dir : './android')
        gradle(task: 'bundle' , build_type: 'Release' , project_dir:'./android')
        supply(track :  'beta' , aab : './android/app/build/outputs/bundle/release/app-release.aab')
    end
end


lane : codepush_ios do |options|
    current_version  = get_version_number(xcodeproj : './ios/test.xcodeproj' , target:'test')
    codepush(current_version: current_version , manditory :  options[:manditory])
end 

private_lane :select_app_version do |options|
    current_version = options[:current_version]
    current_major  = [current_version.split(".").first, 'x',  'x'].join(".")
    current_minor = current_version.split('.').slice(0,2).push('x').join()

   target_version_label =  UI.select("what version do you want to target",  [
        "All User "
        "Most recent major (#{current_major}) "
        "Most recent minor (#{current_minor}) "
        "Current Version (#{current_version})"
    ])

    next "\"*\"" if target_version_label.match(/All/)
    next current_major if target_version_label.match(/major/)
    next current_minor if target_version_label.match(/minor/)

    current_version

end

lane :codepush do |options|
    manditory =  !!options[:manditory]
    manditory_string = manditory ?  " -m" : ""
    version =  select_app_version(current_version: options[:current_version])
    if UI.confirm("Going to Codepush #{version} to production. ")
        Dir.chdir(".") do 
            sh "appcenter codepush release-react -a test -d Production -t #{version}#{manditory_string}  --output-dir ./build " do |status , result ,command|
        unless status.success? 
            UI.error "Command #{command} failed with status #{status.exitstatus}"
        end
        UI.message "Finished ! check it out the release on the app center  "
    end 
    end
    else 
        UI.error  "Not going to push "
    end
end   